{"version":3,"sources":["sampleText.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["sampleText","Button","_ref","children","onClick","react_default","a","createElement","type","className","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","text","target","value","setState","renderText","__html","marked","sanitize","state","bind","assertThisInitialized","localStorage","getItem","setItem","components_Button","onChange","rows","dangerouslySetInnerHTML","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAAaA,EAAa,usBCaXC,EAXA,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,SAAUC,EAAcF,EAAdE,QACxB,OACIC,EAAAC,EAAAC,cAAA,UACIC,KAAK,SACLC,UAAU,eACVL,QAASA,GACJD,ICkEFO,cAjEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAsBRQ,aAAe,SAAAC,GACb,IAAMC,EAAOD,EAAME,OAAOC,MAC1BX,EAAKY,SAAS,CAAEH,UAzBCT,EA4BnBa,WAAa,SAAAJ,GAEX,MAAO,CAAEK,OADMC,IAAON,EAAM,CAAEO,UAAU,MA7BvBhB,EAiCnBR,QAAU,WACRQ,EAAKY,SAAS,CAAEH,KAAMrB,KAhCtBY,EAAKiB,MAAQ,CACXR,KAAMrB,GAERY,EAAKR,QAAUQ,EAAKR,QAAQ0B,KAAbjB,OAAAkB,EAAA,EAAAlB,QAAAkB,EAAA,EAAAlB,CAAAD,KALEA,mFAUjB,IAAMS,EAAOW,aAAaC,QAAQ,QAC9BZ,EACFN,KAAKS,SAAS,CAAEH,SAEhBN,KAAKS,SAAS,CAAEH,KAAMrB,iDAIJ,IACZqB,EAASN,KAAKc,MAAdR,KACRW,aAAaE,QAAQ,OAAQb,oCAkB7B,OACEhB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,0BAAd,oBACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAC4B,EAAD,CAAQ/B,QAASW,KAAKX,SAAtB,aAKJC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,YACE6B,SAAUrB,KAAKI,aACfI,MAAOR,KAAKc,MAAMR,KAClBZ,UAAU,eACV4B,KAAK,QAEThC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,OAAK+B,wBAAyBvB,KAAKU,WAAWV,KAAKc,MAAMR,kBA1DnDkB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.56e08251.chunk.js","sourcesContent":["export const sampleText = '# Julie Desvaux\\n## Développeuse Full-Stack MERN \\n### Recherche de stage (4 à 6 mois) à partir du 19 octobre 2020\\n \\nLes paragraphes sont séparés\\npar une ligne vide.\\n\\nLaissé deux espaces à la fin d\\'une ligne pour  \\naller à la ligne.\\n\\nAttributs *italique*, **gras**, \\n`monospace`, ~~rayé~~.\\n\\nListe:\\n\\n  * HTML/CSS\\n  * JS\\n  * React\\n\\nListe numérotée:\\n\\n  1. NodeJS\\n  2. MongoDB\\n  3. ExpressJS\\n 4.Java\\n\\n *[Julie Desvaux](https://www.http://julie-desvaux.com/)* \\n\\n Lien automatique : https://www.linkedin.com/in/julie-desvaux/ \\n\\n ![Visuel](https://avatars2.githubusercontent.com/u/59824710?s=460&u=37997c75abe2ae59ce99653652c61417225824a4&v=4 \"Visuel\") '\n","import React from 'react';\r\n\r\nconst Button = ({ children, onClick }) => {\r\n    return (\r\n        <button \r\n            type=\"button\" \r\n            className=\"btn btn-dark\"\r\n            onClick={onClick}>\r\n                {children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react'\nimport './App.css'\n\nimport marked from 'marked'\n\nimport { sampleText } from './sampleText'\nimport Button from './components/Button'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      text: sampleText\n    }\n    this.onClick = this.onClick.bind(this)\n  }\n  \n\n  componentDidMount () {\n    const text = localStorage.getItem('text')\n    if (text) {\n      this.setState({ text })\n    } else {\n      this.setState({ text: sampleText })\n    }\n  }\n\n  componentDidUpdate () {\n    const { text } = this.state\n    localStorage.setItem('text', text)\n  }\n\n  handleChange = event => {\n    const text = event.target.value\n    this.setState({ text })\n  }\n\n  renderText = text => {\n    const __html = marked(text, { sanitize: true })\n    return { __html }\n  }\n\n  onClick = () => {\n    this.setState({ text: sampleText })\n  }\n\n  render () {\n    return (\n      <div className='container'>\n        <h1 className='text-center mb-5 title'>Markedown Editor</h1>\n        <div className='row'>\n          <div className='col-12'>\n            <Button onClick={this.onClick}>\n              Refresh\n            </Button>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-sm-6'>\n            <textarea\n              onChange={this.handleChange}\n              value={this.state.text}\n              className='form-control'\n              rows='35' />\n          </div>\n          <div className='col-sm-6'>\n            <div dangerouslySetInnerHTML={this.renderText(this.state.text)} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}